services:
  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5432:5432'
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
  redis:
    image: 'redis:latest'
    ports:
      - '6379:6379'
    labels:
      org.springframework.boot.readiness-check.tcp.disable: true
  zipkin:
    image: 'openzipkin/zipkin:latest'
    ports:
      - '9411:9411'
    labels:
      org.springframework.boot.readiness-check.tcp.disable: true
  kafka:
    image: 'apache/kafka:latest'
    ports:
      - "9092:9092"     # External port
      - "29092:29092"   # Internal port
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: "INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      # Changed back to support both localhost and Docker access
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_METADATA_LOG_DIR: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'OTMwMTI1ODktZWJkZC00YTNkLWExMWEtYzM5MDRkNjZlOTdk'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #    labels:
  #      org.springframework.boot.readiness-check.tcp.disable: true
  kafka-ui:
    image: redpandadata/console:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: "kafka:29092"
      # Add these configs for better compatibility
      KAFKA_SCHEMA_REGISTRY_ENABLED: "false"
      KAFKA_CONSUMER_CONFIG_AUTO_OFFSET_RESET: "earliest"
    depends_on:
      - kafka
  #  akhq:
  #    image: tchiotludo/akhq:latest
  #    environment:
  #      AKHQ_CONFIGURATION: |
  #        akhq:
  #          connections:
  #            docker-kafka-server:
  #              properties:
  #                bootstrap.servers: "kafka:9092"
  #              schema-registry:
  #                enabled: false
  #    ports:
  #      - "8080:8080"
  #    depends_on:
  #      - kafka
  collector:
    image: 'otel/opentelemetry-collector-contrib:latest'
    command:
      - --config=/etc/otel-collector.yml
    volumes:
      - ./otel-collector.yml:/etc/otel-collector.yml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    depends_on:
      - loki
      - tempo
      - jaeger-all-in-one
      - zipkin
    labels:
      org.springframework.boot.readiness-check.tcp.disable: true

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    labels:
      org.springframework.boot.readiness-check.tcp.disable: true

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - loki
      - tempo
      - jaeger-all-in-one
      - zipkin
      - prometheus
    labels:
      org.springframework.boot.readiness-check.tcp.disable: true

  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./tempo.yml:/etc/tempo.yml
    restart: always
    ports:
      - "4317"  # otlp grpc
      - "3200"

  jaeger-all-in-one:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: always
    ports:
      - "16686:16686"
      - "4317"
    labels:
      org.springframework.boot.readiness-check.tcp.disable: true
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage
      - --web.enable-remote-write-receiver
    restart: always
    ports:
      - '9090:9090'
    depends_on:
      - collector
    labels:
      org.springframework.boot.readiness-check.tcp.disable: true

