resilience4j.retry:
  instances:
    backendA:
      maxAttempts: 3
      waitDuration: 100ms
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      retryExceptions:
        - java.lang.RuntimeException
resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 100
      permittedNumberOfCallsInHalfOpenState: 10
      waitDurationInOpenState: 10000
      failureRateThreshold: 60
      eventConsumerBufferSize: 10
      registerHealthIndicator: true
    someShared:
      slidingWindowSize: 50
      permittedNumberOfCallsInHalfOpenState: 10
  instances:
    backendA:
      baseConfig: default
      waitDurationInOpenState: 5000
application:
  client:
    inventory:
      baseUrl: "http://localhost:8081"
      connectTimeout: 1s
  producer.instances:
    inventory:
      bootstrapServers: "http://localhost:9092"
      topic: ${KAFKA_INVENTORY_CONSUMER_TOPIC:allocate-inventory-event}
      idempotence: ${KAFKA_INVENTORY_CONSUMER_GROUP:true}
spring:
  cloud:
    vault:
      enabled: false
  profiles:
    include:
      - common
  kafka:
    bootstrap-servers: "http://localhost:9092"
  datasource:
    #    driverClassName: org.postgresql.Driver
    url: "jdbc:postgresql://localhost:5432/mydatabase"
    username: ${DB_USERNAME:myuser}
    password: ${DB_PASSWORD:secret}